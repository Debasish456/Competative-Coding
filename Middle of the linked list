'''
Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 '''
 
 # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        length=0
        curr=head
        while curr is not None:
            length+=1
            curr=curr.next
        
        prev=None
        mid=length//2
        i=0
        curr=head
        if length==1:
            return head
        while i<=mid and curr is not None:
            prev=curr
            curr=curr.next
            i+=1
        
        head=prev
        return head
