'''
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 '''
 #Approach 1
 class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        res1 = []
        l, r = 0, len(nums) - 1
        while l <= r:
            if abs(nums[l]) > abs(nums[r]):
                res1.append(abs(nums[l]) * abs(nums[l]))
                l += 1
            else:
                res1.append(abs(nums[r]) * abs(nums[r]))
                r -= 1
        return reversed(res1)
        
        
        
#Approach 2
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        result=[0]*len(nums)
        i=0
        j=len(nums)-1
        pos=-1
        while i<=j:
            if nums[i]**2<nums[j]**2:
                result[pos]=nums[j]**2
                j-=1
            else:
                result[pos]=nums[i]**2
                i+=1
            pos-=1
        
        print(result)
        return result
        
#Approach 3
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        for i in range(len(nums)):
            nums[i]=nums[i]**2
        
        result=[0]*len(nums)
        i=0
        j=len(nums)-1
        pos=-1
        while i<=j:
            if nums[i]<nums[j]:
                result[pos]=nums[j]
                j-=1
            else:
                result[pos]=nums[i]
                i+=1
            pos-=1
        
        print(result)
        return result
        
 
